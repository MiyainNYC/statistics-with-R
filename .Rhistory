install.packages("dplR")
?scale
3+4
3+4
install.packages('dplyr',dep = TRUE)
sd(c(5,8,2))
which.min(c(4,1,6))
sd(c(5,8,12))
q()
install.packages('ggplot2',dep = TRUE)
dirName = 'C:\Users\Miya\Desktop\Kaggle'
fileName = 'store.csv'
infile = file.path(dirName,fileName)
eeframe = read.csv(infile,header = True,stringsAsFactors = FALSE)
## Remove dots from column names.
pairs(~.,data=eeframe)
##load the data
dirName = 'C:\Users\Miya\Desktop\Kaggle'
fileName = 'store.csv'
infile = file.path(dirName,fileName)
eeframe = read.csv(infile,header = True,stringsAsFactors = FALSE)
## Remove dots from column names.
pairs(~.,data=eeframe)
##load the data
dirName = 'C:\Users\Miya\Desktop\Kaggle'
fileName = 'store.csv'
infile = file.path(dirName,fileName)
eeframe = read.csv(infile,header = True,stringsAsFactors = FALSE)
## Remove dots from column names.
pairs(~.,data=eeframe)
##load the data
dirName = 'C:\Users\Miya\Desktop\Kaggle'
fileName = 'store.csv'
infile = file.path(dirName,fileName)
eeframe = read.csv(infile,header = True,stringsAsFactors = FALSE)
## Remove dots from column names.
pairs(~.,data=eeframe)
##load the data
dirName = 'C:\Users\Miya\Desktop\Kaggle'
fileName = 'store.csv'
infile = file.path(dirName,fileName)
eeframe = read.csv(infile,header = True,stringsAsFactors = FALSE)
## Remove dots from column names.
pairs(~.,data=eeframe)
##load the data
dirName = 'C:\Users\Miya\Desktop\Kaggle'
fileName = 'store.csv'
infile = file.path(dirName,fileName)
eeframe = read.csv(infile,header = True,stringsAsFactors = FALSE)
## Remove dots from column names.
pairs(~.,data=eeframe)
##load the data
dirName = 'C:\Users\Miya\Desktop\Kaggle'
fileName = 'store.csv'
infile = file.path(dirName,fileName)
eeframe = read.csv(infile,header = True,stringsAsFactors = FALSE)
## Remove dots from column names.
Azure = FALSE
if(Azure){eeframe = mam1.mapInputPort(1)
mam1.mapOutPort('eeframe')}
pairs(~.,data=eeframe)
pairs(~ .,data = eeframe)
## Install ggplot2 (use a personal library if  prompted!)
## Install ggplot2 (use a personal library if  prompted!)
## install.packages('ggplot2', dep = TRUE)
## Use basic R graphics to create a pair-wise scatter plot
Azure = FALSE
if(Azure){
eeframe <- maml.mapInputPort(1)
maml.mapOutputPort('eeframe')
}
pairs(~ ., data = eeframe)
## Use ggplot2 to create conditioned scatter plots
library(ggplot2)
plotCols <- c("RelativeCompactness",
"SurfaceArea",
"WallArea",
"RoofArea",
"GlazingArea",
"GlazingAreaDistribution")
plotEE <- function(x){
title <- paste("Heating Load vs", x, "\n conditioned on OverallHeight and Orientation")
ggplot(eeframe, aes_string(x, "HeatingLoad")) +
geom_point() +
facet_grid(OverallHeight ~ Orientation) +
ggtitle(title) +
stat_smooth(method = "lm")
}
lapply(plotCols, plotEE)
## Create histograms
plotCols4 <- c("RelativeCompactness",
"SurfaceArea",
"WallArea",
"RoofArea",
"GlazingArea",
"GlazingAreaDistribution",
"HeatingLoad")
library(gridExtra)
eeHist <- function(x) {
title <- paste("Histogram of", x, "conditioned on OverallHeight")
ggplot(eeframe, aes_string(x)) +
geom_histogram(aes(y = ..density..)) +
facet_grid(. ~ OverallHeight) +
ggtitle(title) +
geom_density()
}
lapply(plotCols4, eeHist)
## Create box plots
eebox <- function(x) {
title <- paste("Box plot of", x, "by OverallHeight")
ggplot(eeframe, aes_string('OverallHeight', x)) +
geom_boxplot() +
ggtitle(title)
}
lapply(plotCols4, eebox)
"GlazingAreaDistribution")
"GlazingAreaDistribution")
book = ':\Users\Miya\Desktop\AzureML'
dirname = ':\Users\Miya\Desktop\AzureML'
dirname = 'C:\Users\Miya\Desktop\AzureML'
dirname = 'C:\\Users\Miya\Desktop\AzureML'
dirName = 'C:\Users\Miya\Desktop\AzureML'
dirName = 'C:\Users\Miya\Desktop\AzureML'
dirName = 'C:\Users\Miya\Desktop\AzureML'
fileName = 'book1.csv'
infile = file.path(dirName,fileName)
book = read.csv(infile,header = True,stringsAsFactors = FALSE)
dirName = 'C:\Users\Miya\Desktop\AzureML'
fileName = 'book1.csv'
infile = file.path(dirName,fileName)
book = read.csv(infile,header = True,stringsAsFactors = FALSE)
dirName = 'C:\Users\Miya\Desktop\AzureML'
fileName = 'book1.csv'
infile = file.path(dirName,fileName)
getwd()
book = read.csv("Book1.csv",stringsAsFactors = FALSE)
str(book)
book[1]
book[1]
book[2]
book$text[1]
book$Column1[1]
str(book$Column1[1])
strwrap(book$Column1[1])
library(tm)
install.packages(tm)
install.packages("tm")
library(tm)
corpus = Corpus(VectorSource(book$Column1))
strwrap(corpus[[1]])
corpus = tm_map(corpus,tolower)
corpus = tm_map(corpus,removePunctuation)
corpus = tm_map(corpus,removeWords,stopwords("english"))
corpus = tm_map(corpus,stemDocument)
strwrap(book$Column1[1])
strwrap(corpus$Column1[1])
strwrap(corpus[1])
dtm = DocumentTermMatrix(corpus)
corpus = tm_map(corpus,stemDocument)
corpus = tm_map(corpus,stripWhitespace)
dtm = DocumentTermMatrix(corpus)
strwrap(corpus[1])
getwd()
getwd(C:/Users/Miya/Desktop/Amazon
getwd(C:/Users/Miya/Desktop/Amazon)
getwd("C:/Users/Miya/Desktop/Amazon")
train = read.csv("eBayiPadTrain.csv",stringsAsFactors = FALSE)
library(tm)
library("tm")
test = read.csv("eBayiPadTest.csv",stringsAsFactors = FALSE)
corpusdescription = Corpus(VectorSource(c(train$description,test$description)))
corpusdescription
corpusdescription = tm_map(corpusdescription,content_transformer(tolower),lazy = TRUE)
corpusdescription = Corpus(VectorSource(c(train$description,test$description)))
summary(corpusdescription)
corpusdescription = Corpus(VectorSource(c(train$description,test$description)))
corpusdescription = tm_map(corpusdescription,content_transformer(tolower),lazy = TRUE)
corpusdescription = tm_map(corpusdescription,PlanTextDocument,lazy = TRUE)
corpusdescription = tm_map(corpusdescription,removePunctuation,lazy = TRUE)
corpusdescription = tm_map(corpusdescription,removeWords,stopwords("english"),lazy = TRUE)
corpusdescription = tm_map(corpusdescription,stemDocument,lazy = TRUE)
dtm = DocumentTermMatrix((dtm,0.99))
dtm = DocumentTermMatrix(dtm,0.99)
dtm = DocumentTermMatrix(corpusdescription)
corpusdescription = tm_map(corpusdescription,PlanTextDocument,lazy = TRUE)
dtm = DocumentTermMatrix(corpusdescription)
corpusdescription = tm_map(corpusdescription,PlainTextDocument,lazy = TRUE)
corpusdescription = tm_map(corpusdescription,removeWords,stopwords("english"),lazy = TRUE)
corpusdescription = tm_map(corpusdescription,removePunctuation,lazy = TRUE)
corpusdescription = tm_map(corpusdescription,stemDocument.lazy = TRUE)
corpusdescription = tm_map(corpusdescription,content_transformer(tolower),lazy = TRue)
corpusdescription = tm_map(corpusdescription,content_transformer(tolower),lazy = TRUE)
corpusdescription = tm_map(corpusdescription,PlainTextDocument,lazy = TRUE)
corpusdescription = tm_map(corpusdescription,removePunctuation,lazy=TRUE)
corpusdescription = tm_map(corpusdescription,removeWords,lazy=TRUE)
corpusdescription = tm_map(corpusdescription,stemDocument,lazy=TRUE)
dtm = DocumentTermMatrix(corpusdescription)
sparse = removeSparseTerms((dtm,0.99))
sparse = removeSparseTerms(dtm,0.99)
desriptionWords = as.data.frame(as.matrix(sparse))
dtm = DocumentTermMatrix(corpusdescription)
getwd()
gw()
wd()
getwd()
setwd(C:\Users\Miya\Desktop\specdata"")
?setwd
setwd(C:\Users\Miya\Desktop\specdata"")
setwd(C:\Users\Miya\Desktop\specdata")
setwd(C:/Users\Miya\Desktop\specdata")
setwd(C:/Users\Miya\Desktop")
setwd("C:/Users\Miya\Desktop")
setwd("C:\Users\Miya\Desktop")
getwd()
mean(pollutant_all, na.rm = TRUE)
dat <- data.frame()
for(i in id) {
}
ds <- (dat[, pollutant], na.rm = TRUE)
ds <- (dat, na.rm = TRUE)
## read the data into R
kings = scan("http://robjhyndman.com/tsdldata/misc/kings.dat", skip = 3
)
souvenirs = scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
## store the data into timeseries using the funtion of ts(),for monthly frequency, you set the frequency of 12
kingstimeseries = ts(kings)
souvenirstimeseries = ts(souvenirs, frequency = 12, start = c(1987,1))
install.packages("TTR")
births = scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries = ts(births,frequency =12, start = c(1946,1))
birthstimeseriescomponents = decompose(birthstimeseries)
birthstimeseriescomponents = decompose(birthstimeseries)
## the decompose function returns a list object as its result, where the estimates of the seasonal component, trend component and irregular component are stored in names elements of that list objects, called:'seasonal','trend', and'random'
## the estimated values of the seasonal, trend and irregular components are now stored in variables: birthstimeseriescomponents$seasonal,birthstimeseriescomponents$trend and $random
birthstimeseriescomponents$seasonal
g1 <- graph( edges=c(1,2, 2,3, 3,1), n=3, directed=F )
install.packages('devtools')
library(devtools)
library(devtools)
library(ggplot2)
install_github("StatsWithR/statsr")
setwd("C:/Users/Miya/OneDrive/Miya'sGithub/statistics-with-R")
library(dplyr)
library(ggplot2)
library(dplyr)
install.packages('dplyr')
library(dplyr)
data(arbuthnot)
data(arbuthnot)
library(statsr)
arbuthnot
View(book)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
ggplot(data = arbuthnot, aes(x = year, y = girls)) + geom_point()
arbuthnot$boys + arbuthnot$ girls
mutate(totoal = boys + girls)
mutate(totoal = boys + girls)
mutate(total = boys + girls)
mutate(total = boys + girls)
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
help("mutate")
arbuthnot$total = arbuthnot$girls + arbuthnot$boys
arbuthnot
ggplot(data = arbuthnot, aes(x = year, y = total)) + aeion_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) + geom_line()
ggplot(data = arbuthnot, aes(x= year, y= total)) + geom_line() + geom_point()
arbuthnot = arbuthnot %>% mutate(more_boys = boys>girls)
arbuthnot$more_boys = arbuthnot$boys > arbuthnot$girls
arbuthnot
data(present)
dim(data)
dim(present)
present
library(statsr)
data(nycflights)
dim(nycflights)
names(nycflights)
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 50)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 15)
rdu_flights = nycflights %>% filter(dest == 'RDU')
ggplot(data = rdu_flights, aes(x = de_delay)) + geom_histogram()
ggplot(data = rdu_flights, aes(x = dep_delay)) + geom_histogram()
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights= nycflights %>% filter(dest == 'SFO', month ==2)
rdu_flights%>% groupby(origin) %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
rdu_flights%>% group_by(origin) %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay))%>%arrange(desc(mean_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
nycflights = nycflights %>%mutate(dep_delay = ifelse(dep_delay <5, "on time", "delayed"))
nycflights = group_by(origin)%>%summarise(ot_dep_rate = sum(dep_type == "on time")/n())%>%arrange(desc(ot_dep_delay))
nycflights %>%group_by(origin)%>%summarise(ot_dep_rate = sum(dep_type == "on time")/n())%>%arrange(desc(ot_dep_delay))
arrange(desc(ot_dep_rate))
nycflights %>%group_by(origin) %>%summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%arrange(desc(ot_dep_rate))
nycflights = nycflights %>%mutate(dep_type = ifelse(dep_delay <5, "on time", "delayed"))
nycflights %>%group_by(origin) %>%summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%arrange(desc(ot_dep_rate))
nycflights %>%group_by(origin) %>%summarise(ot_dep_rate = float(sum(dep_type == "on time") / n())) %>%arrange(desc(ot_dep_rate))
nycflights %>%group_by(origin) %>%summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type))+geom_bar()
nycflights = nycflights %>%mutate(dep_type = ifelse(dep_delay <5, "on time", "delayed"))
nycflights %>%group_by(origin) %>%summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type))+geom_bar()
nycflights <- nycflights %>%mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%group_by(origin) %>%summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type))+geom_bar()
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay))%>%arange(desc(mean_dd))
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay))%>%arrange(desc(mean_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 15)
rdu_flights = nycflights %>% filter(dest == 'RDU')
ggplot(data = rdu_flights, aes(x = dep_delay)) + geom_histogram()
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights= nycflights %>% filter(dest == 'SFO', month ==2)
rdu_flights%>% group_by(origin) %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay))%>%arrange(desc(mean_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
nycflights <- nycflights %>%mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%group_by(origin) %>%summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type))+geom_bar()
library(dplyr)
library(statsr)
data("kobe_basket")
dim(kobe_basket)
kobe_basket
describe(kobe_basket)
kobe_basket.names
names(kobe_basket)
table(kobe_basket$shot)
help("calc_streak")
kobe_basket = calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) + geom_histgram(binwidth = 1)
ggplot(data = kobe_basket, aes(x = length)) + geom_histgram(binwidth = 1)
ggplot(data = kobe_basket, aes(x = length)) + geom_histogram(binwidth = 1)
ggplot(data = kobe_streakt, aes(x = length)) + geom_histogram(binwidth = 1)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
kobe_streak =  = calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
data("kobe_basket")
kobe_streak =  = calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
data("kobe_basket")
kobe_streak =  = calc_streak(kobe_basket$shot)
kobe_streak = calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
kobe_streak
kobe_basket$shot
coin_outcomes = c('heads', 'tails')
sample(coin_outcomes, size = 1, replace = True)
sample(coin_outcomes, size = 1, replace = TRUE)
help(sample)
type(coin_outcomes)
coin_outcomes.type
help(type)
typeof(coin_outcomes)
sim_fair_coin = sample(coin_outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
help(c)
sim_unfair_coin = sample(coin_outcomes, size = 100, replace = TRUE, prob = c(0.2,0.8))
sim_unfair_coin
table(sim_unfair_coin)
sim_basket = sample(shot_outcomes, size = 1, replace = TRUE)
shot_outcomes = c('H','M')
sim_basket = sample(shot_outcomes, size = 1, replace = TRUE)
sim_basket = sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
basket_streak = calc_streak(sim_basket)
basket_streak
ggplot(data = basket_streak, aes(x = length)) + geom_histogram(binwidth = 1)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
ggplot(data = basket_streak, aes(x = length)) + geom_histogram(binwidth = 1)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
load('selected_nzes2011.Rdata')
library(dplyr)
